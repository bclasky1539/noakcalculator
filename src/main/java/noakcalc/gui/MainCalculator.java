/*
 * noakcalculator(TM) is a Java program that provides a high-precision scientific calculator
 * Copyright (C) 2019-25 quark95cos
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package noakcalc.gui;

import static java.awt.Toolkit.getDefaultToolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import noakcalc.Utilities.MiscConstants;
import noakcalc.Utilities.PrintUtility;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;

/**
 *
 * MainCalculator Class Extends javax.swing.JFrame
 */
public class MainCalculator extends javax.swing.JFrame {


    private int whichFrame = 0; // 0-Nothing, 1-SubCalculator

    private SubCalculator subCalculator = null;

    private static final Logger LOGGER =
        LogManager.getLogger(MainCalculator.class.getName());

    /**
     * Creates new form MainCalculator
     */
    public MainCalculator() {
        //this.setVisible(false);
        initComponents();
        init();
        //this.setLocationRelativeTo(null);
    }

    private void init() {
        //java.util.ResourceBundle numberBundle
        this.setLocationRelativeTo(null);
        try {
            this.whichFrame = 1;
            this.dpMainCalculator.removeAll();
            this.dpMainCalculator.repaint();
            if (subCalculator == null) {
                subCalculator = new SubCalculator();
            }
            this.dpMainCalculator.add(subCalculator);
            this.dpMainCalculator.moveToFront(subCalculator);
            //System.out.println("dpMainCalculator.getWidth(): " + dpMainCalculator.getWidth());  //990
            //System.out.println("dpMainCalculator.getHeight(): " + dpMainCalculator.getHeight()); //522
            //subCalculator.setSize(dpMainCalculator.getWidth(),
            //    dpMainCalculator.getHeight());
            subCalculator.setSize(980, 520);
            subCalculator.setLocation(0, 0);
            // This is set permanently for now.
            subCalculator.setCalcInfo("Output");
            subCalculator.show();
            subCalculator.getJtxtPrimary().requestFocus();
        } catch(Exception e1) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        dpMainCalculator = new javax.swing.JDesktopPane();
        jMainMenuBar = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jSaveAsMenuItem = new javax.swing.JMenuItem();
        jPrintMenuItem = new javax.swing.JMenuItem();
        jCloseMenuItem = new javax.swing.JMenuItem();
        jEditMenu = new javax.swing.JMenu();
        jCopyAnswerMenuItem = new javax.swing.JMenuItem();
        jCopyEquationMenuItem = new javax.swing.JMenuItem();
        jDgGrMenuCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jOutputMenuCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jModeMenu = new javax.swing.JMenu();
        jBasicMenuItem = new javax.swing.JMenuItem();
        jScientificMenuItem = new javax.swing.JMenuItem();
        jHelpMenu = new javax.swing.JMenu();
        jAboutMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("noakcalc/data/text/misc"); // NOI18N
        setTitle(bundle.getString("MAIN_HDNG")); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        dpMainCalculator.setMinimumSize(new java.awt.Dimension(980, 520));

        jFileMenu.setText("File");

        jSaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jSaveAsMenuItem.setText("Save As");
        jSaveAsMenuItem.setEnabled(false);
        jFileMenu.add(jSaveAsMenuItem);

        jPrintMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jPrintMenuItem.setText("Print");
        jPrintMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrintMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jPrintMenuItem);

        jCloseMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCloseMenuItem.setText("Close");
        jCloseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCloseMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jCloseMenuItem);

        jMainMenuBar.add(jFileMenu);

        jEditMenu.setText("Edit");

        jCopyAnswerMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCopyAnswerMenuItem.setText("Copy Answer");
        jCopyAnswerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyAnswerMenuItemActionPerformed(evt);
            }
        });
        jEditMenu.add(jCopyAnswerMenuItem);

        jCopyEquationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCopyEquationMenuItem.setText("Copy Equation");
        jCopyEquationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyEquationMenuItemActionPerformed(evt);
            }
        });
        jEditMenu.add(jCopyEquationMenuItem);

        jDgGrMenuCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jDgGrMenuCheckBoxMenuItem.setText("Digit Grouping");
        jDgGrMenuCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDgGrMenuCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jEditMenu.add(jDgGrMenuCheckBoxMenuItem);

        jOutputMenuCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jOutputMenuCheckBoxMenuItem.setText("Output");
        jOutputMenuCheckBoxMenuItem.setEnabled(false);
        jOutputMenuCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOutputMenuCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jEditMenu.add(jOutputMenuCheckBoxMenuItem);

        jMainMenuBar.add(jEditMenu);
        // This is done prgrammatically for the time being until the code
        // to expand and contract the window is fixed.
        jEditMenu.remove(jOutputMenuCheckBoxMenuItem);

        jModeMenu.setText("Mode");

        jBasicMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jBasicMenuItem.setText("Basic");
        jBasicMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBasicMenuItemActionPerformed(evt);
            }
        });
        jModeMenu.add(jBasicMenuItem);

        jScientificMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jScientificMenuItem.setText("Scientific");
        jScientificMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jScientificMenuItemActionPerformed(evt);
            }
        });
        jModeMenu.add(jScientificMenuItem);

        jMainMenuBar.add(jModeMenu);

        jHelpMenu.setText("Help");

        jAboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jAboutMenuItem.setText("About");
        jAboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAboutMenuItemActionPerformed(evt);
            }
        });
        jHelpMenu.add(jAboutMenuItem);

        jMainMenuBar.add(jHelpMenu);

        setJMenuBar(jMainMenuBar);
        // Remove the jModeMenu porgrammatically for the time being. The
        // Scientific Calculator is to be loaded on start up
        jMainMenuBar.remove(jModeMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dpMainCalculator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dpMainCalculator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        this.setLayout(null);
        this.setResizable(false);

    }//GEN-LAST:event_formWindowActivated

    private void jScientificMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jScientificMenuItemActionPerformed
        try {
            this.whichFrame = 1;
            this.dpMainCalculator.removeAll();
            this.dpMainCalculator.repaint();
            if (subCalculator == null) {
                subCalculator = new SubCalculator();
            }
            this.dpMainCalculator.add(subCalculator);
            this.dpMainCalculator.moveToFront(subCalculator);
            subCalculator.setSize(dpMainCalculator.getWidth(),
                dpMainCalculator.getHeight());
            subCalculator.setLocation(0, 0);
            // This is set permanently for now.
            subCalculator.setCalcInfo("Output");
            subCalculator.show();
            subCalculator.getJtxtPrimary().requestFocus();
        } catch(Exception e1) {
        }
    }//GEN-LAST:event_jScientificMenuItemActionPerformed

    private void jDgGrMenuCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDgGrMenuCheckBoxMenuItemActionPerformed
        LOGGER.debug("#" + evt.getActionCommand() + "#");
        if (whichFrame == 1) {
            subCalculator.setCalcInfo(evt.getActionCommand());
        }
    }//GEN-LAST:event_jDgGrMenuCheckBoxMenuItemActionPerformed

    private void jCopyAnswerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyAnswerMenuItemActionPerformed
        if (whichFrame == 1) {
            getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(subCalculator.getJtxtPrimary().getText()), null);
        }
    }//GEN-LAST:event_jCopyAnswerMenuItemActionPerformed

    private void jCopyEquationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyEquationMenuItemActionPerformed
        if (whichFrame == 1) {
            getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(subCalculator.getJtxtSecondary().getText()), null);
        }
    }//GEN-LAST:event_jCopyEquationMenuItemActionPerformed

    private void jAboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(null, MiscConstants.ABOUT_INFO,
            MiscConstants.ABOUT_HDNG, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jAboutMenuItemActionPerformed

    private void jCloseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCloseMenuItemActionPerformed
        System.exit(0);
        //close();
        /*int dialogButton = JOptionPane.YES_NO_OPTION;
        JOptionPane.showConfirmDialog (null, "Would you like to exit the application?","Warning",dialogButton);

        if(dialogButton == JOptionPane.YES_OPTION){
           System.exit(NORMAL);
        }*/
    }//GEN-LAST:event_jCloseMenuItemActionPerformed

    private void jBasicMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBasicMenuItemActionPerformed
        try {
            this.whichFrame = 0;
            this.dpMainCalculator.removeAll();
            this.dpMainCalculator.repaint();
        } catch(Exception e1) {
        }
    }//GEN-LAST:event_jBasicMenuItemActionPerformed

    private void jOutputMenuCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOutputMenuCheckBoxMenuItemActionPerformed

    }//GEN-LAST:event_jOutputMenuCheckBoxMenuItemActionPerformed

    private void jPrintMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrintMenuItemActionPerformed
        if (whichFrame == 1) {
            if (!subCalculator.getJtxtAreaOutput().getText().equals("")) {
                PrintUtility.printComponent(subCalculator.getJtxtAreaOutput());
            }
            
        }
    }//GEN-LAST:event_jPrintMenuItemActionPerformed

    /**
     * close() method will close the window only. You can use this when you want
     * to open new window and close the current window.
     */
    public void close() {
        //How to close previous jframe on the opening of new jframe
        //this.setVisible(false);
        //this.dispose();
        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            LOGGER.fatal("#" + ex + "#");
            java.util.logging.Logger.getLogger(MainCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /* Original for Lambda expression
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new StandardCalculator().setVisible(true);
            }
        }); */
        // Parse parameters
        if ((args.length > 0) && (args[0].toUpperCase().matches("N"))) {
            // Set the root LOGGER to Level.WARN is debug is turned off
            Configurator.setRootLevel(Level.WARN);
            System.out.println("MainCalculator logging is WARN\n");
        }
        else {
            System.out.println("MainCalculator logging is DEBUG\n");
        }

        // Lambda expression
        //java.awt.EventQueue.invokeLater(() -> {
        //    new MainCalculator().setVisible(true);
        //});
        MainCalculator mainCalculator = new MainCalculator();
        mainCalculator.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane dpMainCalculator;
    private javax.swing.JMenuItem jAboutMenuItem;
    private javax.swing.JMenuItem jBasicMenuItem;
    private javax.swing.JMenuItem jCloseMenuItem;
    private javax.swing.JMenuItem jCopyAnswerMenuItem;
    private javax.swing.JMenuItem jCopyEquationMenuItem;
    private javax.swing.JCheckBoxMenuItem jDgGrMenuCheckBoxMenuItem;
    private javax.swing.JMenu jEditMenu;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JMenu jHelpMenu;
    private javax.swing.JMenuBar jMainMenuBar;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenu jModeMenu;
    private javax.swing.JCheckBoxMenuItem jOutputMenuCheckBoxMenuItem;
    private javax.swing.JMenuItem jPrintMenuItem;
    private javax.swing.JMenuItem jSaveAsMenuItem;
    private javax.swing.JMenuItem jScientificMenuItem;
    // End of variables declaration//GEN-END:variables
}
